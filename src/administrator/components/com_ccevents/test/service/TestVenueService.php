<?php
/**
 *  $Id $
 *  Copyright (c) 2006, Tachometry Corporation
 * 	http://www.tachometry.com
 * 
 *  Licensed under terms of the Apache License 2.0
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Tachometry Applications and Professional Services (TAPS)
 **/
 
if (!defined('WEB_INF')) {
    @define('WEB_INF', realpath(dirname(__FILE__) . '/../../WEB-INF'));
}
require_once WEB_INF . '/base.include.php'; 
require_once WEB_INF . '/beans/PublicationState.php';
require_once WEB_INF . '/service/VenueService.php';
require_once('simpletest/unit_tester.php');
require_once('simpletest/reporter.php');

class TestVenueService extends UnitTestCase {

	private $service = NULL;
	
    function __construct() {
        parent::__construct();
    }
    
    function setUp() {
    	$this->service = new VenueService();
    }

	function tearDown() {
	}
	
	function testSetupVenue() {
		
		global $logger;

		$v = $this->getTestVenue();
		$result = $this->service->setupVenue($v);
		$logger->debug('new venue: ' . $result->getOid());
		
		$this->assertTrue($result->getOid() > 0);
		$this->assertEqual($result->getName(), $v->getName());
		$this->assertCopy($result->getName(), $v->getName());
		$this->assertEqual($result->getDescription(), $v->getDescription());
		$this->assertCopy($result->getDescription(), $v->getDescription());
		$this->service->delete($result->getOid());
	}


	function testGetVenueById()
	{
		global $logger;
		
		$tv = $this->service->setupVenue($this->getTestVenue());
		$this->assertTrue($tv->getOid() > 0);
		
		$result = $this->service->getVenueById($tv->getOid());
		
		$logger->debug("venue is of type: ". gettype($result));
		$this->assertTrue(get_class($result) == 'Venue');
		$this->assertEqual($result->getOid(),$tv->getOid());
		$this->assertCopy($result->getName(),$tv->getName());
		$this->service->delete($tv->getOid());	
	}


	function testGetVenuesByPubState()
	{
		global $logger;
		
		$result = $this->service->getVenuesByPubState();
		$this->assertTrue(count($result)>0);
		$logger->debug('Number of venues for non-archived state:'. count($result));
		
		$result = $this->service->getVenuesByPubState(array(PublicationState::ARCHIVED));
		$logger->debug('Number of venues for archived state:'. count($result));
	}
	
	function testGetHostedEvents()
	{
		global $logger;
		
		// This test only works when there is a known venue with links
		//$result = $this->service->getHostedEvents(75);
		//$this->assertTrue(count($result) > 0);	
	}
	
	
	
	private function getTestVenue()
	{
		$v = new Venue();
		$v->setName(get_class($this) . ': ' . date('Y-m-d_H:i:s'));
		$v->setDescription('Auto-generated by SimpleTest');
		$v->setPubState('Published');
		return $v;	
	}
}

// standalone test
if (! defined('MAIN')) {
    @define('MAIN', true);

	require_once WEB_INF . '/service/VenueService.php'; 
	$test = new TestVenueService();
	$test->run(new HtmlReporter());
}
?>
