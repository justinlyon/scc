<?php
/**
 *  $Id $
 *  Copyright (c) 2006, Tachometry Corporation
 * 	http://www.tachometry.com
 * 
 *  Licensed under terms of the Apache License 2.0
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Tachometry Applications and Professional Services (TAPS)
 **/
 
if (!defined('WEB_INF')) {
    @define('WEB_INF', realpath(dirname(__FILE__) . '/../../WEB-INF'));
}
require_once WEB_INF . '/base.include.php'; 
require_once WEB_INF . '/service/EventService.php';
require_once WEB_INF . '/service/VenueService.php';
require_once WEB_INF . '/beans/Exhibition.php';
require_once WEB_INF . '/beans/Program.php';
require_once WEB_INF . '/beans/Venue.php';

require_once('simpletest/unit_tester.php');
require_once('simpletest/reporter.php');

class TestEventService extends UnitTestCase {

	private $service = NULL;
	private $venueService = NULL;
	
    function __construct() {
        parent::__construct();
    }
    
    function setUp() {
    	$this->service = new EventService();
    	$this->venueService = new VenueService();
    }

	function tearDown() {
	}
/*	
	function testSetupEvent() {
		
		global $logger;
		$last = $this->service->getLastEventByType('Exhibition');

		$event = new Exhibition();
		$event->setTitle(get_class($this) . ': ' . date('Y-m-d_H:i:s'));
		$event->setSubtitle('This is a test Exhibition');
		$event->setDescription('Auto-generated by SimpleTest');
		$event->setSummary('Midsummer Woodwind Concert Series');
		$event->setScheduleNote('Rainchecks will be issued in case of inclement weather');
		$event->setPricing('$10 for Adults; 12 and under free');
		$event->setTicketDesc('General Seating (outdoor)');
		$event->setTicketUrl('http://ticketmaster.skirball.org/');
		$event->setDisplayOrder($last->getDisplayOrder()+1);
		$event->setPubState( 'Published' );
		$time = time();
		$event->setStartTime($time);
		$event->setEndTime($time+86400);
		
		$result = $this->service->setupEvent('Exhibition', $event);
		$logger->debug('new event: ' . $result->getOid());
		$this->assertTrue($result->getOid() > 0);
		$this->assertEqual($result->getScope(), 'Exhibition');

		$this->assertEqual($result->getTitle(), $event->getTitle());
		$this->assertCopy($result->getTitle(), $event->getTitle());
		$this->assertEqual($result->getSubtitle(), $event->getSubtitle());
		$this->assertCopy($result->getSubtitle(), $event->getSubtitle());
		$this->assertEqual($result->getDescription(), $event->getDescription());
		$this->assertCopy($result->getDescription(), $event->getDescription());
		$this->assertEqual($result->getSummary(), $event->getSummary());
		$this->assertCopy($result->getSummary(), $event->getSummary());
		$this->assertEqual($result->getScheduleNote(), $event->getScheduleNote());
		$this->assertCopy($result->getScheduleNote(), $event->getScheduleNote());
		$this->assertEqual($result->getPricing(), $event->getPricing());
		$this->assertCopy($result->getPricing(), $event->getPricing());
		$this->assertEqual($result->getTicketDesc(), $event->getTicketDesc());
		$this->assertCopy($result->getTicketDesc(), $event->getTicketDesc());
		$this->assertEqual($result->getTicketUrl(), $event->getTicketUrl());
		$this->assertCopy($result->getTicketUrl(), $event->getTicketUrl());
		$this->assertEqual($result->getDisplayOrder(), $event->getDisplayOrder());
		$this->assertCopy($result->getDisplayOrder(), $event->getDisplayOrder());
		$this->assertTrue($result->getDisplayOrder() == $last->getDisplayOrder()+1);
		$this->assertEqual($result->getStartTime(), $event->getStartTime());
		$this->assertCopy($result->getStartTime(), $event->getStartTime());
		$this->assertEqual($result->getEndTime(), $event->getEndTime());
		$this->assertCopy($result->getEndTime(), $event->getEndTime());
	}
*/	
	function testVenueLink() {
		global $logger;
		
		$venue = $this->venueService->getLastVenue();
		$this->assertTrue($venue->getOid() > 0);
		
		$event = $this->service->getLastEventByType('Exhibition');
		$this->assertTrue($event->getOid() > 0);
		$event->setVenues(array($venue->getOid()));
		$event->setPubState($event->getPubState()->getValue());
		$event->setEventStatus($event->getEventStatus()->getValue());
		
		$this->service->updateEvent('Exhibition',$event);
		
		$result = $this->service->getLastEventByType('Exhibition');
		$this->assertNotNull($result->getVenues());
		
		$logger->debug("Returned venues is of class: ". get_class($result->getVenues()));
		
		$rvs = $result->getVenues();
		$rv = $rvs->offsetGet(0);
		$this->assertEqual($venue->getName(), $rv->getName());
		
	}
/*	
	function testUpdateEvent() {
		
		global $logger;

		$event = new Program();
		$event->setTitle(get_class($this) . ': ' . date('Y-m-d_H:i:s'));
		$event->setSubtitle('This is a test Program');
		$event->setDecription('Auto-generated by SimpleTest');
		$event->setSummary('Welcome to the Skirball Cultural Center');
		$event->setScheduleNote('Shirts and shoes required');
		$event->setPricing('Free');
		$event->setTicketDesc('Open House (RSVP)');
		$event->setTicketUrl('http://ticketmaster.skirball.org/');
		
		$result = $this->service->setupEvent('Program', $event);
		$logger->debug('new event: ' . $result->getOid());
		$this->assertTrue($result->getOid() > 0);
		$this->assertEqual($result->getScope(), 'Program');

		$event->setOid($result->getOid());
		$event->setDescription('Updated by SimpleTest');
		
		$result = $this->service->updateEvent('Program',$event);
		
		$this->assertEqual($result->getDescription(), $event->getDescription());
		$this->assertCopy($result->getDescription(), $event->getDescription());
		$logger->debug('program description: ' . $result->getDescription());
	}
	
	function testGetVenues() {
		
		global $logger;

		$result = $this->service->getVenues();
		$logger->debug("getVenues returned ". count($result) ." venues");
		$this->assertTrue(count($result) > 0);
		
		// TODO: setup event with venue(s) and find
		
	}
	
	function testGetCategories() {
		
		global $logger;

		$this->assertError($this->service->getCategories(null, null));
		$result = $this->service->getCategories('Genre', null);
		$logger->debug("getCategories returned ". count($result) ." genres");
		$this->assertTrue(count($result) > 0);
		
		// TODO: setup event with category(ies) and find
		
	}
	
	function testGetRelatedEvents() {
		
		global $logger;

		$this->assertError($this->service->getRelatedEvents());
		$result = $this->service->getRelatedEvents('Program');
		$this->assertTrue(count($result) > 0);
		
		// TODO: setup event with related event(s) and find
		
	}
	

	function testGetEventsByPubState() {
		
		global $logger;

		//$this->assertError($this->service->getEventsByPubState());
		$result = $this->service->getEventsByPubState('Exhibition');
		$this->assertTrue(count($result) > 0);
		$result = $this->service->getEventsByPubState('Exhibition', array('Published','Unpublished'));
		$this->assertTrue(count($result) > 0);
		$event = $result[0];
		$this->assertNotNull($event->getPubState());
		$pubStateValue = $event->getPubState()->getValue();
		//$logger->debug("PublicationState value: $pubStateValue");
		$this->assertTrue($pubStateValue == 'Published' || $pubStateValue == 'Unpublished');
		// TODO: setup event with specified status and find
		
	}
	
	function testGetLastEventByType() {
		global $logger;	
		
		//$this->assertError($this->service->getLastEventByType(null));
		$event = $this->service->getLastEventByType('Program');
		$this->assertTrue($event->getOid() > 0);
		
		//$this->assertError($this->service->getLastEventByType('Course'));
	}
	
	function testGetEventByOrderIndex() {
		global $logger;	
		
		//$this->assertError($this->service->getLastEventByType(null));
		$event = $this->service->getEventByOrderIndex('Exhibition',1);
		$this->assertTrue($event->getOid() > 0);
		
		//$this->assertError($this->service->getLastEventByType('Course'));
	}
	
	function testGetNextDisplayOrder() {
		global $logger;	
		$last = $this->service->getLastEventByType('Exhibition');
		$last_order = $last->getDisplayOrder();
		$this->assertTrue($last_order > 0);
		$next_order = $this->service->getNextDisplayOrder('Exhibition');
		$this->assertTrue($next_order > 0);
		//$logger->debug("last order:". $last_order ."| next_order: ". $next_order);
		$this->assertTrue($next_order == (intval($last_order)+1));		
	}
	
	function testFetchDisplayOrder() {
		global $logger;
		
		$state = $this->service->fetchPubState('Published');
		$this->assertTrue($state->getValue() == 'Published');
		// TODO: Add out of range test case	
	}
	
	function testFetchEventStatus() {
		global $logger;
		
		$status = $this->service->fetchEventStatus('Sold Out');
		$this->assertTrue($status->getValue() == 'Sold Out');
		// TODO: Add out of range test case	
	}
	
	
	function testDelete() {
		global $logger;
		
		//$this->assertError($this->service->delete(null, null));
		//$this->assertError($this->service->delete('Exhibition', null));

		$event = $this->service->getLastEventByType('Program');
		//$this->assertError($this->service->delete(null, $event->getOid()));
		$this->service->delete('Program', $event->getOid());
		//$this->assertError($this->service->getEventById('Exhibition', $oid));
		$event = $this->service->getLastEventByType('Exhibition');
		$this->service->delete('Exhibition', $event->getOid());
	}
*/
}

// standalone test
if (! defined('MAIN')) {
    @define('MAIN', true);

	require_once WEB_INF . '/service/EventService.php'; 
	$test = new TestEventService();
	$test->run(new HtmlReporter());
}
?>
